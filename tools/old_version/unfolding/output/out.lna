etherGame(N := 2, cb := 0, users := 1, v1 := 3, v2 := 2, v3 := 5, v4 := 3, v5 := 10, v6 := 5) {
type boolean : range 0 .. 1;
type count : range 0 .. N;
subtype  : count range 0 .. (count'last-1);
type marking_value : list[event_id] of boolean with capacity N;
type mvalue : struct { event_id id;boolean vl;};
type vchange : list[event_id] of mvalue with capacity N;
type cvalue : struct { boolean cv1;boolean cv2;};
type vcondition : list[event_id] of cvalue with capacity N;
function cvalue (marking_value mv, vchange lc) -> marking_value{
	marking_value m := empty;
	for(v in mv){
		m := m & v;
	}
	for(v in lc){
		m[v.id] := v.vl;
	}
	return m;
}
function confirm_condition (vcondition vc) -> boolean{
	boolean ret := 1;
	for(v in vc){
		if(v.cv1 = 1 and v.cv2 = 0) ret := 0;
	}
	return ret;
}
function confirm_milestone (vcondition vc) -> boolean{
	boolean ret := 1;
	for(v in vc){
		if(v.cv1 = 1 and v.cv2 = 1) ret := 0;
	}
	return ret;
}
type ADDRESS : range 0 .. 100;
type UINT : range 0 .. (int'last);
type USER : struct { ADDRESS adr;UINT balance;};
type STRUCT_REDEEMABLE_ETHER : struct { ADDRESS adr;UINT uint;};
type LIST_REDEEMABLE_ETHER : list[nat] of STRUCT_REDEEMABLE_ETHER with capacity 100;
type STATE : struct { UINT contractBalance;UINT payoutMileStone1;UINT mileStone1Reward;UINT payoutMileStone2;UINT mileStone2Reward;UINT finalMileStone;UINT finalReward;LIST_REDEEMABLE_ETHER redeemableEther;};
type PLAY_PAR : struct { USER sender;UINT value;};
type CLAIM_REWARD_PAR : struct { USER sender;UINT value;};
type PLAY_RETURN : struct { USER sender;};
type CLAIM_REWARD_RETURN : struct { USER sender;};
type PLAY_STATE : struct { STATE state;PLAY_PAR playPar;};
type CLAIM_REWARD_STATE : struct { STATE state;CLAIM_REWARD_PAR claimRewardPar;};
function initRedeemableEther (nat n) -> LIST_REDEEMABLE_ETHER{
		LIST_REDEEMABLE_ETHER l := empty;
      		for (i in ADDRESS range 1 .. ADDRESS (n)) l := {i,UINT(0)} & l;
      		return l;
   
}
function getElement (LIST_REDEEMABLE_ETHER lre, ADDRESS adr) -> STRUCT_REDEEMABLE_ETHER{
	   	int i := 0;
	   	while (i<lre'size and lre[i].adr!=adr) i := i+1;
	   	if(i<lre'size)
	   		return lre[i];
	   	else
	   		return {0,0};
}
function getIndex (LIST_REDEEMABLE_ETHER lre, ADDRESS adr) -> int{
	   	int i := 0;
	   	while (i<lre'size and lre[i].adr!=adr) i := i+1;
	   	if(i<lre'size)
	   		return i;
	   	else
	   		return -1;
}
/*
 * Function: state
 */
place marking {
	dom : marking_value*marking_value*marking_value;
	init : <(|0,0|,|0,0|,|1,1|)>;
}
place cflow {
	dom : epsilon;
	init : epsilon;
}
place S {
	dom : STATE;
	init : <( {UINT(cb), UINT(v1), UINT(v2), UINT(v3), UINT(v4), UINT(v5), UINT(v6), initRedeemableEther(users)} )>;
}
/*
 * Function: play
 */
place play_cflow {
	dom : epsilon;
}
place P_Play {
	dom : PLAY_PAR;
	init : for (i in ADDRESS range 1 .. ADDRESS (users)) <( {{i , UINT(i*100)},UINT(1)} )>;
}
place PLAY_P1 {
	dom : PLAY_STATE;
}
place PLAY_P2 {
	dom : PLAY_STATE;
}
place PLAY_P3 {
	dom : PLAY_STATE;
}
place PLAY_P4 {
	dom : PLAY_STATE;
}
place PLAY_PT1 {
	dom : PLAY_STATE;
}
place PLAY_PT2 {
	dom : PLAY_STATE;
}
place PLAY_PT3 {
	dom : PLAY_STATE;
}
place PLAY_PF1 {
	dom : PLAY_STATE;
}
place PLAY_PF2 {
	dom : PLAY_STATE;
}
place PLAY_currentBalance {
	dom : UINT;
}
transition play {
	in {
		marking : <(execute,response,include)>;
		cflow : epsilon;
	}
	out {
		marking : <(execute,cvalue(response,|{0,0}|),include)>;
		play_cflow : epsilon;
	}
	guard : (include[0] = 1);
}
transition PLAY_revert1 {
	in {
		S : <( s )>;
		P_Play : <( p )>;
		play_cflow : epsilon;
	}
	out {
		S : <( s )>;
		cflow : epsilon;
	}
	guard : not (p.value = 1);
}
transition PLAY_n_revert1 {
	in {
		S : <( s )>;
		P_Play : <( p )>;
		play_cflow : epsilon;
	}
	out {
		PLAY_P1 : <( {s,p} )>;
	}
	guard : p.value = 1;
}
transition PLAY_t1 {
	in {
		PLAY_P1 : <( sp )>;
	}
	out {
		PLAY_currentBalance : <( (sp.state.contractBalance) + (sp.playPar.value) )>;
		PLAY_P2 : <( sp )>;
	}
}
transition PLAY_revert2 {
	in {
		PLAY_P2 : <( sp )>;
		PLAY_currentBalance : <( currentBalance )>;
	}
	out {
		PLAY_currentBalance : <( currentBalance )>;
		S : <( sp.state )>;
		cflow : epsilon;
	}
	guard : not (currentBalance <= sp.state.finalMileStone);
}
transition PLAY_n_revert2 {
	in {
		PLAY_P2 : <( sp )>;
		PLAY_currentBalance : <( currentBalance )>;
	}
	out {
		PLAY_currentBalance : <( currentBalance )>;
		PLAY_P3 : <( sp )>;
	}
	guard : currentBalance <= sp.state.finalMileStone;
}
transition PLAY_tT1 {
	in {
		PLAY_P3 : <( sp )>;
		PLAY_currentBalance : <( currentBalance )>;
	}
	out {
		PLAY_currentBalance : <( currentBalance )>;
		PLAY_PT1 : <( sp )>;
	}
	guard : currentBalance = sp.state.payoutMileStone1;
}
transition PLAY_tF1 {
	in {
		PLAY_P3 : <( sp )>;
		PLAY_currentBalance : <( currentBalance )>;
	}
	out {
		PLAY_currentBalance : <( currentBalance )>;
		PLAY_PF1 : <( sp )>;
	}
	guard : not (currentBalance = sp.state.payoutMileStone1);
}
transition PLAY_tT2 {
	in {
		PLAY_PF1 : <( sp )>;
		PLAY_currentBalance : <( currentBalance )>;
	}
	out {
		PLAY_currentBalance : <( currentBalance )>;
		PLAY_PT2 : <( sp )>;
	}
	guard : currentBalance = sp.state.payoutMileStone2;
}
transition PLAY_tF2 {
	in {
		PLAY_PF1 : <( sp )>;
		PLAY_currentBalance : <( currentBalance )>;
	}
	out {
		PLAY_currentBalance : <( currentBalance )>;
		PLAY_PF2 : <( sp )>;
	}
	guard : not (currentBalance = sp.state.payoutMileStone2);
}
transition PLAY_tT3 {
	in {
		PLAY_PF2 : <( sp )>;
		PLAY_currentBalance : <( currentBalance )>;
	}
	out {
		PLAY_currentBalance : <( currentBalance )>;
		PLAY_PT3 : <( sp )>;
	}
	guard : currentBalance = sp.state.finalMileStone;
}
transition PLAY_tF3 {
	in {
		PLAY_PF2 : <( sp )>;
		PLAY_currentBalance : <( currentBalance )>;
	}
	out {
		PLAY_currentBalance : <( currentBalance )>;
		PLAY_P4 : <( sp )>;
	}
	guard : not (currentBalance = sp.state.finalMileStone);
}
transition PLAY_t2 {
	in {
		PLAY_PT1 : <( sp )>;
	}
	out {
		PLAY_P4 : <( {sp.state :: (redeemableEther := nlre),sp.playPar} )>;
	}
	let {
					STRUCT_REDEEMABLE_ETHER re := getElement(sp.state.redeemableEther,sp.playPar.sender.adr);
			STRUCT_REDEEMABLE_ETHER nre := re :: (uint := re.uint + sp.state.mileStone1Reward);
			LIST_REDEEMABLE_ETHER nlre := sp.state.redeemableEther :: ([getIndex(sp.state.redeemableEther,sp.playPar.sender.adr)] := nre);
	
		}
}
transition PLAY_t3 {
	in {
		PLAY_PT2 : <( sp )>;
	}
	out {
		PLAY_P4 : <( {sp.state :: (redeemableEther := nlre),sp.playPar} )>;
	}
	let {
					STRUCT_REDEEMABLE_ETHER re := getElement(sp.state.redeemableEther,sp.playPar.sender.adr);
			STRUCT_REDEEMABLE_ETHER nre := re :: (uint := re.uint + sp.state.mileStone2Reward);
			LIST_REDEEMABLE_ETHER nlre := sp.state.redeemableEther :: ([getIndex(sp.state.redeemableEther,sp.playPar.sender.adr)] := nre);
	
		}
}
transition PLAY_t4 {
	in {
		PLAY_PT3 : <( sp )>;
	}
	out {
		PLAY_P4 : <( {sp.state :: (redeemableEther := nlre),sp.playPar} )>;
	}
	let {
					STRUCT_REDEEMABLE_ETHER re := getElement(sp.state.redeemableEther,sp.playPar.sender.adr);
			STRUCT_REDEEMABLE_ETHER nre := re :: (uint := re.uint + sp.state.finalReward);
			LIST_REDEEMABLE_ETHER nlre := sp.state.redeemableEther :: ([getIndex(sp.state.redeemableEther,sp.playPar.sender.adr)] := nre);
	
		}
}
transition PLAY_return {
	in {
		PLAY_P4 : <( sp )>;
	}
	out {
		S : <( sp.state )>;
		cflow : epsilon;
	}
}
/*
 * Function: claimReward
 */
transition claimReward {
	in {
		marking : <(execute,response,include)>;
		cflow : epsilon;
	}
	out {
		marking : <(execute,cvalue(response,|{1,0}|),cvalue(include,|{0,1}|))>;
		cflow : epsilon;
	}
}
/*** proposition ***/
proposition outOfRange:
	exists (t1 in PLAY_currentBalance | 0 < t1->1) or exists (t2 in S | (t2->1).depositedWei > 10);

proposition proposition_number_1:
	exists (t in PLAY_currentBalance | t->1 < 10);

}
