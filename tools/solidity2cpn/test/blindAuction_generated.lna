BlindAuction {

/* ------- Color definition ------- */

type address : range 0 .. 100;
type uint : range 0 .. 1000;
type USER : struct { address adr;uint balance;};
type bytes32 : range 0 .. 1000;
type Bid : struct { bytes32 blindedBid;uint deposit;};
type list_Bid : list[nat] of Bid with capacity 50;
type struct_bids : struct { address key;list_Bid value;};
type list_bids : list[nat] of struct_bids with capacity 50;
type struct_pendingReturns : struct { address key;uint value;};
type list_pendingReturns : list[nat] of struct_pendingReturns with capacity 50;
type list_uint : list[nat] of uint with capacity 50;
type list_bytes32 : list[nat] of bytes32 with capacity 50;

/* ------- State color definition ------- */

type STATE : struct { list_bids bids;bytes32 blindedBid;uint contractBalance;uint deposit;uint highestBid;address highestBidder;list_pendingReturns pendingReturns;};
type bid_par : struct { USER sender;uint value;};
type bid_return : struct { USER sender;};
type bid_state : struct { STATE state;bid_par par;};
type reveal_par : struct { USER sender;uint value;list_uint values;list_bytes32 secrets;};
type reveal_return : struct { USER sender;};
type reveal_state : struct { STATE state;reveal_par par;};
type withdraw_par : struct { USER sender;uint value;};
type withdraw_return : struct { USER sender;};
type withdraw_state : struct { STATE state;withdraw_par par;};

/* ------- Function definition ------- */

function getlist_bidsIndex (list_bids list_bids_par, address a) -> int{
	int i := 0;
	while (i<list_bids_par'size and list_bids_par[i].key!=a) i := i+1;
	if(i<list_bids_par'size)
		return i;
	else
		return -1;
}
function push_bid_enter_value1 (bid_state bid_enter_pr) -> bid_state{
	bid_state bid_enter_temp := bid_enter_pr;
	bid_enter_temp.state.bids[getlist_bidsIndex(bid_enter_pr.state.bids,bid_enter_pr.par.sender.adr)].value := bid_enter_temp.state.bids[getlist_bidsIndex(bid_enter_pr.state.bids,bid_enter_pr.par.sender.adr)].value & {bid_enter_pr.state.blindedBid,bid_enter_pr.par.value};
	return bid_enter_temp;
}
function getlist_pendingReturnsIndex (list_pendingReturns list_pendingReturns_par, address a) -> int{
	int i := 0;
	while (i<list_pendingReturns_par'size and list_pendingReturns_par[i].key!=a) i := i+1;
	if(i<list_pendingReturns_par'size)
		return i;
	else
		return -1;
}
function change_bid_pu1_value2 (bid_state bid_pu1_pr) -> bid_state{
	bid_state bid_pu1_temp := bid_pu1_pr;
	bid_pu1_temp.state.pendingReturns[getlist_pendingReturnsIndex(bid_pu1_pr.state.pendingReturns,bid_pu1_pr.par.sender.adr)].value := bid_pu1_temp.state.pendingReturns[getlist_pendingReturnsIndex(bid_pu1_pr.state.pendingReturns,bid_pu1_pr.par.sender.adr)].value + bid_pu1_pr.par.value;
	return bid_pu1_temp;
}
function keccak256 (uint value, bytes32 secret) -> bytes32{
	return bytes32 (nat (value) * nat (secret));
}
function change_reveal_is6_value7 (reveal_state reveal_is6_pr, uint reveal_value4_pr) -> reveal_state{
	reveal_state reveal_is6_temp := reveal_is6_pr;
	reveal_is6_temp.state.highestBid := reveal_value4_pr;
	return reveal_is6_temp;
}
function change_reveal_ass7_value8 (reveal_state reveal_ass7_pr) -> reveal_state{
	reveal_state reveal_ass7_temp := reveal_ass7_pr;
	reveal_ass7_temp.state.highestBidder := reveal_ass7_pr.par.sender.adr;
	return reveal_ass7_temp;
}
function change_withdraw_eif4_value6 (withdraw_state withdraw_eif4_pr) -> withdraw_state{
	withdraw_state withdraw_eif4_temp := withdraw_eif4_pr;
	withdraw_eif4_temp.state.pendingReturns[getlist_pendingReturnsIndex(withdraw_eif4_pr.state.pendingReturns,withdraw_eif4_pr.par.sender.adr)].value := 0;
	return withdraw_eif4_temp;
}

/* ------- Place definition ------- */

place state {
	dom : STATE;
}
place bid_parameter {
	dom : bid_par;
}
place bid_enter {
	dom : bid_state;
}
place bid_pu1 {
	dom : bid_state;
}
place bid_ass2 {
	dom : bid_state;
}
place reveal_parameter {
	dom : reveal_par;
}
place reveal_enter {
	dom : reveal_state;
}
place reveal_nr1 {
	dom : reveal_state;
}
place reveal_init_2 {
	dom : reveal_state;
}
place reveal_i_2 {
	dom : int;
}
place reveal_cond_2 {
	dom : reveal_state;
}
place reveal_n_cond_2 {
	dom : reveal_state;
}
place reveal_bid13 {
	dom : Bid;
}
place reveal_vd3 {
	dom : reveal_state;
}
place reveal_value4 {
	dom : uint;
}
place reveal_vd4 {
	dom : reveal_state;
}
place reveal_secret5 {
	dom : bytes32;
}
place reveal_vd5 {
	dom : reveal_state;
}
place reveal_is6 {
	dom : reveal_state;
}
place reveal_ass7 {
	dom : reveal_state;
}
place reveal_ass8 {
	dom : reveal_state;
}
place reveal_eif8 {
	dom : reveal_state;
}
place withdraw_parameter {
	dom : withdraw_par;
}
place withdraw_enter {
	dom : withdraw_state;
}
place withdraw_amount1 {
	dom : uint;
}
place withdraw_vd1 {
	dom : withdraw_state;
}
place withdraw_is2 {
	dom : withdraw_state;
}
place withdraw_is3 {
	dom : withdraw_state;
}
place withdraw_fc4 {
	dom : withdraw_state;
}
place withdraw_eif4 {
	dom : withdraw_state;
}
place withdraw_else4 {
	dom : withdraw_state;
}
place withdraw_fc5 {
	dom : withdraw_state;
}
place withdraw_ass6 {
	dom : withdraw_state;
}
place withdraw_eif6 {
	dom : withdraw_state;
}

/* ------- Transition definition ------- */

transition bid {
	in {
		state : <(state_pr)>;
		bid_parameter : <(bid_pr)>;
	}
	out {
		bid_enter : <({state_pr,bid_pr})>;
	}
}
transition bid_push1 {
	in {
		bid_enter : <(bid_enter_pr)>;
	}
	out {
		bid_pu1 : <(push_bid_enter_value1(bid_enter_pr))>;
	}
}
transition bid_assign2 {
	in {
		bid_pu1 : <(bid_pu1_pr)>;
	}
	out {
		bid_ass2 : <(change_bid_pu1_value2(bid_pu1_pr))>;
	}
}
transition bid_endfunc {
	in {
		bid_ass2 : <(bid_ass2_pr)>;
	}
	out {
		state : <(bid_ass2_pr.state)>;
		bid_parameter : <(bid_ass2_pr.par)>;
	}
}
transition reveal {
	in {
		state : <(state_pr)>;
		reveal_parameter : <(reveal_pr)>;
	}
	out {
		reveal_enter : <({state_pr,reveal_pr})>;
	}
}
transition reveal_revert1 {
	in {
		reveal_enter : <(reveal_enter_pr)>;
	}
	out {
		state : <(reveal_enter_pr.state)>;
	}
	guard : not((reveal_enter_pr.par.values'size) = (reveal_enter_pr.par.secrets'size));
}
transition reveal_n_revert1 {
	in {
		reveal_enter : <(reveal_enter_pr)>;
	}
	out {
		reveal_nr1 : <(reveal_enter_pr)>;
	}
	guard : (reveal_enter_pr.par.values'size) = (reveal_enter_pr.par.secrets'size);
}
transition reveal_initforloop_2 {
	in {
		reveal_nr1 : <(reveal_nr1_pr)>;
	}
	out {
		reveal_init_2 : <(reveal_nr1_pr)>;
		reveal_i_2 : <(0)>;
	}
}
transition reveal_condforloop_2 {
	in {
		reveal_init_2 : <(reveal_init_2_pr)>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
	out {
		reveal_cond_2 : <(reveal_init_2_pr)>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
	guard : ((reveal_i_2_pr) < (reveal_init_2_pr.par.values'size)) and ((reveal_i_2_pr) < (reveal_init_2_pr.state.bids[getlist_bidsIndex(reveal_init_2_pr.state.bids,reveal_init_2_pr.par.sender.adr)].value'size));
}
transition reveal_vardec3 {
	in {
		reveal_cond_2 : <(reveal_cond_2_pr)>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
	out {
		reveal_vd3 : <(reveal_cond_2_pr)>;
		reveal_bid13 : <(reveal_cond_2_pr.state.bids[getlist_bidsIndex(reveal_cond_2_pr.state.bids,reveal_cond_2_pr.par.sender.adr)].value[reveal_i_2_pr])>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
}
transition reveal_vardec4 {
	in {
		reveal_vd3 : <(reveal_vd3_pr)>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
	out {
		reveal_vd4 : <(reveal_vd3_pr)>;
		reveal_value4 : <(reveal_vd3_pr.par.values[reveal_i_2_pr])>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
}
transition reveal_vardec5 {
	in {
		reveal_vd4 : <(reveal_vd4_pr)>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
	out {
		reveal_vd5 : <(reveal_vd4_pr)>;
		reveal_secret5 : <(reveal_vd4_pr.par.secrets[reveal_i_2_pr])>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
}
transition reveal_ifstate6 {
	in {
		reveal_vd5 : <(reveal_vd5_pr)>;
		reveal_bid13 : <(reveal_bid13_pr)>;
		reveal_value4 : <(reveal_value4_pr)>;
		reveal_secret5 : <(reveal_secret5_pr)>;
	}
	out {
		reveal_is6 : <(reveal_vd5_pr)>;
		reveal_bid13 : <(reveal_bid13_pr)>;
		reveal_value4 : <(reveal_value4_pr)>;
		reveal_secret5 : <(reveal_secret5_pr)>;
	}
	guard : (((reveal_bid13_pr.blindedBid) = (keccak256(reveal_value4_pr,reveal_secret5_pr))) and ((reveal_bid13_pr.deposit) >= (reveal_value4_pr))) and ((reveal_value4_pr) > (reveal_vd5_pr.state.highestBid));
}
transition reveal_assign7 {
	in {
		reveal_is6 : <(reveal_is6_pr)>;
		reveal_value4 : <(reveal_value4_pr)>;
	}
	out {
		reveal_value4 : <(reveal_value4_pr)>;
		reveal_ass7 : <(change_reveal_is6_value7(reveal_is6_pr,reveal_value4_pr))>;
	}
}
transition reveal_assign8 {
	in {
		reveal_ass7 : <(reveal_ass7_pr)>;
	}
	out {
		reveal_ass8 : <(change_reveal_ass7_value8(reveal_ass7_pr))>;
	}
}
transition reveal_endif8 {
	in {
		reveal_ass8 : <(reveal_ass8_pr)>;
	}
	out {
		reveal_eif8 : <(reveal_ass8_pr)>;
	}
}
transition reveal_n_ifstate8 {
	in {
		reveal_vd5 : <(reveal_vd5_pr)>;
		reveal_bid13 : <(reveal_bid13_pr)>;
		reveal_value4 : <(reveal_value4_pr)>;
		reveal_secret5 : <(reveal_secret5_pr)>;
	}
	out {
		reveal_eif8 : <(reveal_vd5_pr)>;
		reveal_bid13 : <(reveal_bid13_pr)>;
		reveal_value4 : <(reveal_value4_pr)>;
		reveal_secret5 : <(reveal_secret5_pr)>;
	}
	guard : not ((((reveal_bid13_pr.blindedBid) = (keccak256(reveal_value4_pr,reveal_secret5_pr))) and ((reveal_bid13_pr.deposit) >= (reveal_value4_pr))) and ((reveal_value4_pr) > (reveal_vd5_pr.state.highestBid)));
}
transition reveal_forinc8 {
	in {
		reveal_eif8 : <(reveal_eif8_pr)>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
	out {
		reveal_init_2 : <(reveal_eif8_pr)>;
		reveal_i_2 : <(reveal_i_2_pr + 1)>;
	}
}
transition reveal_condforloop_n_2 {
	in {
		reveal_init_2 : <(reveal_init_2_pr)>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
	out {
		reveal_n_cond_2 : <(reveal_init_2_pr)>;
		reveal_i_2 : <(reveal_i_2_pr)>;
	}
	guard : not (((reveal_i_2_pr) < (reveal_init_2_pr.par.values'size)) and ((reveal_i_2_pr) < (reveal_init_2_pr.state.bids[getlist_bidsIndex(reveal_init_2_pr.state.bids,reveal_init_2_pr.par.sender.adr)].value'size)));
}
transition reveal_endfunc {
	in {
		reveal_n_cond_2 : <(reveal_n_cond_2_pr)>;
	}
	out {
		state : <(reveal_n_cond_2_pr.state)>;
		reveal_parameter : <(reveal_n_cond_2_pr.par)>;
	}
}
transition withdraw {
	in {
		state : <(state_pr)>;
		withdraw_parameter : <(withdraw_pr)>;
	}
	out {
		withdraw_enter : <({state_pr,withdraw_pr})>;
	}
}
transition withdraw_vardec1 {
	in {
		withdraw_enter : <(withdraw_enter_pr)>;
	}
	out {
		withdraw_vd1 : <(withdraw_enter_pr)>;
		withdraw_amount1 : <(withdraw_enter_pr.state.pendingReturns[getlist_pendingReturnsIndex(withdraw_enter_pr.state.pendingReturns,withdraw_enter_pr.par.sender.adr)].value)>;
	}
}
transition withdraw_ifstate2 {
	in {
		withdraw_vd1 : <(withdraw_vd1_pr)>;
		withdraw_amount1 : <(withdraw_amount1_pr)>;
	}
	out {
		withdraw_is2 : <(withdraw_vd1_pr)>;
		withdraw_amount1 : <(withdraw_amount1_pr)>;
	}
	guard : (withdraw_amount1_pr) > (0);
}
transition withdraw_ifstate3 {
	in {
		withdraw_is2 : <(withdraw_is2_pr)>;
	}
	out {
		withdraw_is3 : <(withdraw_is2_pr)>;
	}
	guard : (withdraw_is2_pr.par.sender.adr) != (withdraw_is2_pr.state.highestBidder);
}
transition withdraw_funcall4 {
	in {
		withdraw_is3 : <(withdraw_is3_pr)>;
		withdraw_amount1 : <(withdraw_amount1_pr)>;
	}
	out {
		withdraw_fc4 : <({withdraw_is3_pr.state :: (contractBalance := withdraw_is3_pr.state.contractBalance - (withdraw_amount1_pr)),withdraw_is3_pr.par})>;
		withdraw_amount1 : <(withdraw_amount1_pr)>;
	}
}
transition withdraw_endif4 {
	in {
		withdraw_fc4 : <(withdraw_fc4_pr)>;
	}
	out {
		withdraw_eif4 : <(withdraw_fc4_pr)>;
	}
}
transition withdraw_else4 {
	in {
		withdraw_is2 : <(withdraw_is2_pr)>;
	}
	out {
		withdraw_else4 : <(withdraw_is2_pr)>;
	}
	guard : not ((withdraw_is2_pr.par.sender.adr) != (withdraw_is2_pr.state.highestBidder));
}
transition withdraw_funcall5 {
	in {
		withdraw_else4 : <(withdraw_else4_pr)>;
		withdraw_amount1 : <(withdraw_amount1_pr)>;
	}
	out {
		withdraw_fc5 : <({withdraw_else4_pr.state :: (contractBalance := withdraw_else4_pr.state.contractBalance - ((withdraw_amount1_pr) - (withdraw_else4_pr.state.highestBid))),withdraw_else4_pr.par})>;
		withdraw_amount1 : <(withdraw_amount1_pr)>;
	}
}
transition withdraw_endifelse5 {
	in {
		withdraw_fc5 : <(withdraw_fc5_pr)>;
	}
	out {
		withdraw_eif4 : <(withdraw_fc5_pr)>;
	}
}
transition withdraw_assign6 {
	in {
		withdraw_eif4 : <(withdraw_eif4_pr)>;
	}
	out {
		withdraw_ass6 : <(change_withdraw_eif4_value6(withdraw_eif4_pr))>;
	}
}
transition withdraw_endif6 {
	in {
		withdraw_ass6 : <(withdraw_ass6_pr)>;
	}
	out {
		withdraw_eif6 : <(withdraw_ass6_pr)>;
	}
}
transition withdraw_n_ifstate6 {
	in {
		withdraw_vd1 : <(withdraw_vd1_pr)>;
		withdraw_amount1 : <(withdraw_amount1_pr)>;
	}
	out {
		withdraw_eif6 : <(withdraw_vd1_pr)>;
		withdraw_amount1 : <(withdraw_amount1_pr)>;
	}
	guard : not ((withdraw_amount1_pr) > (0));
}
transition withdraw_endfunc {
	in {
		withdraw_eif6 : <(withdraw_eif6_pr)>;
	}
	out {
		state : <(withdraw_eif6_pr.state)>;
		withdraw_parameter : <(withdraw_eif6_pr.par)>;
	}
}

/* ------- Another definition ------- */


}