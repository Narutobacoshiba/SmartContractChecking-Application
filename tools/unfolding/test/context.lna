test(N := 2) {

/**************************
*** Colours Definitions ***
**************************/

type boolean : range 0 .. 1;
type count : range 0 .. N;
subtype event_id : count range 0 .. (count'last-1);
type marking_value : list[event_id] of boolean with capacity N;
type mvalue : struct { event_id id;boolean vl;};
type vchange : list[event_id] of mvalue with capacity N;
type cvalue : struct { event_id id;boolean cv2;};
type vcondition : list[event_id] of cvalue with capacity N;

/**************************
*** Functions Definitions ***
**************************/

function cvalue () -> marking_value{
	marking_value m := empty;
	for(v in mv){
		m := m & v;
	}
	for(v in lc){
		m[v.id] := v.vl;
	}
	return m;
}
function confirm_condition () -> boolean{
	boolean ret := 1;
	for(v in vc){
		if(v.cv1 = 1 and v.cv2 = 0) ret := 0;
	}
	return ret;
}
function confirm_milestone () -> boolean{
	boolean ret := 1;	for(v in vc){
		if(v.cv1 = 1 and v.cv2 = 1) ret := 0;
	}
	return ret;
}

/**************************
*** PLACES ***
**************************/

place marking {
	dom : marking_value*marking_value*marking_value;
	init : <(|0,0|,|0,0|,|1,1|)>;
}

/**************************
*** TRANSITIONS ***
**************************/


/*
*  Function: play
*/
transition play {
	in {
		marking : <(execute,response,include)>;
	}
	out {
		marking : <(execute,cvalue(response,|{0,0}|),include)>;
	}
	guard : (include[0] = 1)
}

/*
*  Function: claimReward
*/
transition claimReward {
	in {
		marking : <(execute,response,include)>;
	}
	out {
		marking : <(execute,cvalue(response,|{1,0}|),cvalue(include,|{0,1}|))>;
	}
	guard : (include[1] = 1) and (confirm_condition(|{include[0],execute[0]}|) = 1)
}

/**************************
*** ANOTHER ***
**************************/


}