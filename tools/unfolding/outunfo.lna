etherGame(N := 2, cb := 0, users := 1, v1 := 3, v2 := 2, v3 := 5, v4 := 3, v5 := 10, v6 := 5) {
type boolean : range 0 .. 1;
type count : range 0 .. N;
subtype event_id : count range 0 .. (count'last-1);
type marking_value : list[event_id] of boolean with capacity N;
type mvalue : struct { event_id id;boolean vl;};
type vchange : list[event_id] of mvalue with capacity N;
type cvalue : struct { boolean cv1;boolean cv2;};
type vcondition : list[event_id] of cvalue with capacity N;
function cvalue (marking_value mv, vchange lc) -> marking_value{
	marking_value m := empty;
	for(v in mv){
		m := m & v;
	}
	for(v in lc){
		m[v.id] := v.vl;
	}
	return m;
}
function confirm_condition (vcondition vc) -> boolean{
	boolean ret := 1;
	for(v in vc){
		if(v.cv1 = 1 and v.cv2 = 0) ret := 0;
	}
	return ret;
}
function confirm_milestone (vcondition vc) -> boolean{
	boolean ret := 1;
	for(v in vc){
		if(v.cv1 = 1 and v.cv2 = 1) ret := 0;
	}
	return ret;
}
type ADDRESS : range 0 .. 100;
type UINT : range 0 .. (int'last);
type USER : struct { ADDRESS adr;UINT balance;};
type STRUCT_REDEEMABLE_ETHER : struct { ADDRESS adr;UINT uint;};
type LIST_REDEEMABLE_ETHER : list[nat] of STRUCT_REDEEMABLE_ETHER with capacity 100;
type STATE : struct { UINT contractBalance;UINT payoutMileStone1;UINT mileStone1Reward;UINT payoutMileStone2;UINT mileStone2Reward;UINT finalMileStone;UINT finalReward;LIST_REDEEMABLE_ETHER redeemableEther;};
type PLAY_PAR : struct { USER sender;UINT value;};
type CLAIM_REWARD_PAR : struct { USER sender;UINT value;};
type PLAY_RETURN : struct { USER sender;};
type CLAIM_REWARD_RETURN : struct { USER sender;};
type PLAY_STATE : struct { STATE state;PLAY_PAR playPar;};
type CLAIM_REWARD_STATE : struct { STATE state;CLAIM_REWARD_PAR claimRewardPar;};
function initRedeemableEther (nat n) -> LIST_REDEEMABLE_ETHER{
		LIST_REDEEMABLE_ETHER l := empty;
      		for (i in ADDRESS range 1 .. ADDRESS (n)) l := {i,UINT(0)} & l;
      		return l;
   
}
function getElement (LIST_REDEEMABLE_ETHER lre, ADDRESS adr) -> STRUCT_REDEEMABLE_ETHER{
	   	int i := 0;
	   	while (i<lre'size and lre[i].adr!=adr) i := i+1;
	   	if(i<lre'size)
	   		return lre[i];
	   	else
	   		return {0,0};

}
function getIndex (LIST_REDEEMABLE_ETHER lre, ADDRESS adr) -> int{
	   	int i := 0;
	   	while (i<lre'size and lre[i].adr!=adr) i := i+1;
	   	if(i<lre'size)
	   		return i;
	   	else
	   		return -1;

}

/*
 * Function: state
 */
place marking {
	dom : marking_value*marking_value*marking_value;
	init : <(|0,0|,|0,0|,|1,1|)>;
}
place cflow {
	dom : epsilon;
	init : epsilon;
}
place S {
	dom : STATE;
	init : <( {UINT(cb), UINT(v1), UINT(v2), UINT(v3), UINT(v4), UINT(v5), UINT(v6), initRedeemableEther(users)} )>;
}

/*
 * Function: play
 */
transition play {
	in {
		marking : <(execute,response,include)>;
		cflow : epsilon;
	}
	out {
		marking : <(execute,cvalue(response,|{0,0}|),include)>;
		cflow : epsilon;
	}
	guard : (include[0] = 1);
}

/*
 * Function: claimReward
 */
transition claimReward {
	in {
		marking : <(execute,response,include)>;
		cflow : epsilon;
	}
	out {
		marking : <(execute,cvalue(response,|{1,0}|),cvalue(include,|{0,1}|))>;
		cflow : epsilon;
	}
}

/*** proposition ***/

}